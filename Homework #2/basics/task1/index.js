console.log(2 + "2" == "2" + 2); /* Выведет true, потому что
конкатенируется число со строкой 22==22 */

console.log(2 + "3" == "3" + 2); /* Выведет false, потому что
конкатенируется число со строкой 23!=32 */

console.log("3" + "2" == 3 + 2); /* Выведет false, потому что
слева конкатенируются строки, а справа складываются числа 32!=5 */

console.log("3" + "2" == "3" + 2); /* Выведет true, потому что
слева конкатенируются строки, справа строка с числом 32==32 */

console.log("3" + "2" == 2 + "3"); /* Выведет false, потому что
конкатенируются строки с числом 32==23 */

console.log(2 + Number("3") == Number("3") + 2); /* Выведет true, потому что
строка преобразуется в число, складывается 2 числа  5==5 */

console.log(12 / "6"); //Выведет 2, потому что оба операнда приводятся к числу

console.log("number" + 15 + 3); /* Выведет number153, потому что
конкатенируется строка с числами*/

console.log(15 + 3 + "number"); /* Выведет 18number, потому что
сначала идёт сложение, а потом конкатенируется число и строка*/

console.log([1] > null); /* Выведет true, потому что
оператор сравнения > вызывает численное преобразование для [1] и null */

console.log("foo" + + "bar"); /* Выведет fooNaN, потому что
была произведена попытка преобразования строки в число */

console.log('true' == true); /* Выведет false потому что
Оператор сравнения == вызывает численное преобразование,
поэтому строка true конвертируется в NaN, а правый операнд true станет 1 */

console.log(false == 'false'); /* Выведет false потому что
Оператор сравнения == вызывает численное преобразование,
поэтому строка false конвертируется в NaN, а левый операнд false станет 0 */

console.log(null == ''); /* Выведет false потому что
Оператор == обычно вызывает численное преобразование, но не в случае с null */

console.log(!!"false" == !!"true");/*Выведет true, потому что
Оператор !! конвертирует строки true и false в булевое значение true */

console.log(['x'] == 'x'); /*Выведет true потому что
Метод массива возвращает сам массив, а значит результат игнорируется,
так как не является примитивом. Далее, вызывается метод массив,
который конвертирует [‘x’] в строку ‘x’*/

const enemy = {
    name: "Bob"
 };
 const friend = {
    name: "Alex"
 };
 const me = friend;

 me.name = "Bob";

console.log(friend.name); /*Выведет Bob потому что
присвоили значение объекта friend и потом перезаписали свойство name на значение "Bob" */

console.log(me === friend);/*Выведет true потому что
переменной mе присваиваем ccылку на объект friend */

console.log(me === enemy);/*Выведет false потому что
переменной mе присваиваем ccылку на другой объект enemy */
